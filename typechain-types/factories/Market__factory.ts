/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Market, MarketInterface } from "../Market";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sold",
        type: "bool",
      },
    ],
    name: "OnMarketItemCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "createMarketItem",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
    ],
    name: "createMarketSale",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fetchMarketItems",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "itenId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct Market.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fetchMarketPurchases",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "itenId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct Market.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getListingFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526658d15e1762800060045534801561001b57600080fd5b50600160008190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113e5806100746000396000f3fe60806040526004361061004a5760003560e01c80630f08efe01461004f57806358eb2df51461007a57806395b0c2a614610096578063b8fe6abe146100c1578063c23b139e146100ec575b600080fd5b34801561005b57600080fd5b50610064610108565b6040516100719190611064565b60405180910390f35b610094600480360381019061008f9190610d58565b6103bb565b005b3480156100a257600080fd5b506100ab61067d565b6040516100b89190611064565b60405180910390f35b3480156100cd57600080fd5b506100d6610967565b6040516100e391906110e8565b60405180910390f35b61010660048036038101906101019190610d1c565b610971565b005b606060006101166001610c4d565b905060006101246002610c4d565b8261012f9190611163565b905060008167ffffffffffffffff811115610173577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101ac57816020015b610199610c71565b8152602001906001900390816101915790505b5090506000600190505b8381116103b1576005600082815260200190815260200160002060060160009054906101000a900460ff1661039e57600560008281526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508260018561034c9190611163565b81518110610383577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525060018361039b9190611163565b92505b80806103a990611224565b9150506101b6565b5080935050505090565b60026000541415610401576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f8906110c8565b60405180910390fd5b60026000819055506000811161044c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610443906110a8565b60405180910390fd5b60045434146004546040516020016104649190611007565b604051602081830303815290604052906104b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ab9190611086565b60405180910390fd5b506104bf6001610c5b565b60006104cb6001610c4d565b90506040518060e001604052808481526020018281526020018573ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020018381526020016000151581525060056000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff021916908315150217905550905050506001600081905550505050565b6060600061068b6001610c4d565b905060006106996002610c4d565b905060008167ffffffffffffffff8111156106dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561071657816020015b610703610c71565b8152602001906001900390816106fb5790505b5090506000600190505b83811161095d573373ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561094a57600560008281526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff161515151581525050826001856108f89190611163565b8151811061092f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506001836109479190611163565b92505b808061095590611224565b915050610720565b5080935050505090565b6000600454905090565b600260005414156109b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ae906110c8565b60405180910390fd5b600260008190555060006005600083815260200190815260200160002060050154905060006005600084815260200190815260200160002060000154905081341482604051602001610a099190610fe1565b60405160208183030381529060405290610a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a509190611086565b60405180910390fd5b50336005600085815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005600085815260200190815260200160002060060160006101000a81548160ff0219169083151502179055506005600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610b5a573d6000803e3d6000fd5b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b8152600401610b989392919061102d565b600060405180830381600087803b158015610bb257600080fd5b505af1158015610bc6573d6000803e3d6000fd5b50505050610bd46002610c5b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051600060405180830381858888f19350505050158015610c3e573d6000803e3d6000fd5b50505060016000819055505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6040518060e001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b600081359050610d0181611381565b92915050565b600081359050610d1681611398565b92915050565b60008060408385031215610d2f57600080fd5b6000610d3d85828601610cf2565b9250506020610d4e85828601610d07565b9150509250929050565b600080600060608486031215610d6d57600080fd5b6000610d7b86828701610cf2565b9350506020610d8c86828701610d07565b9250506040610d9d86828701610d07565b9150509250925092565b6000610db38383610f1e565b60e08301905092915050565b610dc8816111a9565b82525050565b610dd781611197565b82525050565b610de681611197565b82525050565b6000610df782611113565b610e018185611136565b9350610e0c83611103565b8060005b83811015610e3d578151610e248882610da7565b9750610e2f83611129565b925050600181019050610e10565b5085935050505092915050565b610e53816111bb565b82525050565b6000610e648261111e565b610e6e8185611147565b9350610e7e8185602086016111f1565b610e87816112a6565b840191505092915050565b6000610e9f601983611147565b9150610eaa826112b7565b602082019050919050565b6000610ec2603083611158565b9150610ecd826112e0565b603082019050919050565b6000610ee5601483611158565b9150610ef08261132f565b601482019050919050565b6000610f08601f83611147565b9150610f1382611358565b602082019050919050565b60e082016000820151610f346000850182610fac565b506020820151610f476020850182610fac565b506040820151610f5a6040850182610dce565b506060820151610f6d6060850182610dbf565b506080820151610f806080850182610dbf565b5060a0820151610f9360a0850182610fac565b5060c0820151610fa660c0850182610e4a565b50505050565b610fb5816111e7565b82525050565b610fc4816111e7565b82525050565b610fdb610fd6826111e7565b61126d565b82525050565b6000610fec82610eb5565b9150610ff88284610fca565b60208201915081905092915050565b600061101282610ed8565b915061101e8284610fca565b60208201915081905092915050565b60006060820190506110426000830186610ddd565b61104f6020830185610ddd565b61105c6040830184610fbb565b949350505050565b6000602082019050818103600083015261107e8184610dec565b905092915050565b600060208201905081810360008301526110a08184610e59565b905092915050565b600060208201905081810360008301526110c181610e92565b9050919050565b600060208201905081810360008301526110e181610efb565b9050919050565b60006020820190506110fd6000830184610fbb565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061116e826111e7565b9150611179836111e7565b92508282101561118c5761118b611277565b5b828203905092915050565b60006111a2826111c7565b9050919050565b60006111b4826111c7565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561120f5780820151818401526020810190506111f4565b8381111561121e576000848401525b50505050565b600061122f826111e7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561126257611261611277565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f46726565206974656d73206172656e277420616c6c6f77656400000000000000600082015250565b7f54686520726571756972656420707269636520746f20636f6d706c657465207460008201527f68652070757263686173652069733a2000000000000000000000000000000000602082015250565b7f546865206c697374696e67206665652069733a20000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61138a81611197565b811461139557600080fd5b50565b6113a1816111e7565b81146113ac57600080fd5b5056fea2646970667358221220881781fcb1bc25a65b6bca618d90fe8f24e08a4ffcfe76be53f697da6f8ab83764736f6c63430008040033";

type MarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Market__factory extends ContractFactory {
  constructor(...args: MarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Market> {
    return super.deploy(overrides || {}) as Promise<Market>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Market {
    return super.attach(address) as Market;
  }
  connect(signer: Signer): Market__factory {
    return super.connect(signer) as Market__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketInterface {
    return new utils.Interface(_abi) as MarketInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Market {
    return new Contract(address, _abi, signerOrProvider) as Market;
  }
}
