/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type MarketItemStruct = {
  tokenId: BigNumberish;
  itenId: BigNumberish;
  nftContract: string;
  seller: string;
  owner: string;
  price: BigNumberish;
  sold: boolean;
};

export type MarketItemStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  BigNumber,
  boolean
] & {
  tokenId: BigNumber;
  itenId: BigNumber;
  nftContract: string;
  seller: string;
  owner: string;
  price: BigNumber;
  sold: boolean;
};

export interface MarketInterface extends utils.Interface {
  functions: {
    "createMarketItem(address,uint256,uint256)": FunctionFragment;
    "createMarketSale(address,uint256)": FunctionFragment;
    "fetchMarketItems()": FunctionFragment;
    "fetchMarketPurchases()": FunctionFragment;
    "getListingFee()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createMarketItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketSale",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMarketItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMarketPurchases",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListingFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMarketPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingFee",
    data: BytesLike
  ): Result;

  events: {
    "OnMarketItemCreated(uint256,uint256,address,address,address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnMarketItemCreated"): EventFragment;
}

export type OnMarketItemCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string, BigNumber, boolean],
  {
    tokenId: BigNumber;
    itemId: BigNumber;
    nftContract: string;
    seller: string;
    owner: string;
    price: BigNumber;
    sold: boolean;
  }
>;

export type OnMarketItemCreatedEventFilter =
  TypedEventFilter<OnMarketItemCreatedEvent>;

export interface Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createMarketSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<[MarketItemStructOutput[]]>;

    fetchMarketPurchases(
      overrides?: CallOverrides
    ): Promise<[MarketItemStructOutput[]]>;

    getListingFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  createMarketItem(
    nftContract: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createMarketSale(
    nftContract: string,
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchMarketItems(
    overrides?: CallOverrides
  ): Promise<MarketItemStructOutput[]>;

  fetchMarketPurchases(
    overrides?: CallOverrides
  ): Promise<MarketItemStructOutput[]>;

  getListingFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarketSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<MarketItemStructOutput[]>;

    fetchMarketPurchases(
      overrides?: CallOverrides
    ): Promise<MarketItemStructOutput[]>;

    getListingFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OnMarketItemCreated(uint256,uint256,address,address,address,uint256,bool)"(
      tokenId?: BigNumberish | null,
      itemId?: BigNumberish | null,
      nftContract?: string | null,
      seller?: null,
      owner?: null,
      price?: null,
      sold?: null
    ): OnMarketItemCreatedEventFilter;
    OnMarketItemCreated(
      tokenId?: BigNumberish | null,
      itemId?: BigNumberish | null,
      nftContract?: string | null,
      seller?: null,
      owner?: null,
      price?: null,
      sold?: null
    ): OnMarketItemCreatedEventFilter;
  };

  estimateGas: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createMarketSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchMarketItems(overrides?: CallOverrides): Promise<BigNumber>;

    fetchMarketPurchases(overrides?: CallOverrides): Promise<BigNumber>;

    getListingFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createMarketSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchMarketItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchMarketPurchases(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
